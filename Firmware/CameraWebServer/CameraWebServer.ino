#include "esp_camera.h"
#include <WiFi.h>
#include "esp_timer.h"
#include "esp_camera.h"
#include "img_converters.h"
#include "fb_gfx.h"
#include "driver/ledc.h"
#include "sdkconfig.h"
#include "esp_log.h"
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>

const char* ssid = "Frontier2976";
const char* password = "0550337623";

// Create AsyncWebServer object on port 80

const int ledPin = 2;
AsyncWebServer server(8000);
AsyncWebSocket ws("/");


void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
  AwsFrameInfo *info = (AwsFrameInfo*)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    data[len] = 0;    
    Serial.println((char*)data);    
    // Deserialize the JSON document
    DynamicJsonDocument command(1024);
    deserializeJson(command, (char*)data);    
    int left = command["left"];
    Serial.println(left);
    if(left > 0){
      digitalWrite(ledPin, HIGH);
    }else{
      digitalWrite(ledPin, LOW);
    }
  }
}

void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type,
             void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:      
      handleWebSocketMessage(arg, data, len);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}


//
// WARNING!!! PSRAM IC required for UXGA resolution and high JPEG quality
//            Ensure ESP32 Wrover Module or other board with PSRAM is selected
//            Partial images will be transmitted if image exceeds buffer size
//

#define CAMERA_MODEL_AI_THINKER // Has PSRAM

#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
#define index_ov2640_html_gz_len 6787
//edit the html page below here: https://gchq.github.io/CyberChef/#recipe=Gzip('Dynamic%20Huffman%20Coding','index.html.gz','',false)To_Hex('0x',0)Split('0x',',0x')
const uint8_t index_ov2640_html_gz[] = {0x1f,0x8b,0x08,0x08,0xe6,0xd4,0x82,0x62,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xad,0x5a,0x79,0x73,0xdb,0x36,0xda,0xff,0xdf,0x9f,0x02,0x55,0x27,0x95,0x1c,0xcb,0x3a,0x5c,0x27,0xcd,0xca,0x96,0xdf,0x71,0x1c,0x27,0x9b,0xb4,0x71,0xd2,0x38,0xc9,0xbe,0xdd,0x4c,0xa6,0x03,0x89,0x90,0x04,0x87,0x22,0x59,0x12,0xf2,0xd1,0xc4,0xdf,0xbd,0xbf,0x07,0x00,0x49,0x10,0xa4,0x64,0x77,0xba,0x1a,0x1d,0x24,0xf0,0xdc,0x78,0x2e,0x80,0x3a,0xfc,0xee,0xd9,0x9b,0x93,0xf7,0xbf,0xbd,0x3d,0x65,0x0b,0xb5,0x0c,0x8f,0xb6,0x0e,0xcd,0x0f,0x63,0x87,0x0b,0xc1,0x83,0x23,0xa6,0x5f,0xb8,0xc5,0x80,0x92,0x2a,0x14,0x47,0xa7,0xe7,0x6f,0x7f,0xdc,0x63,0x6f,0x3e,0xee,0xed,0x3f,0x1e,0x1c,0xf6,0xcd,0x98,0x99,0xcf,0xd4,0x4d,0x7e,0x9d,0xbf,0xbe,0xe7,0x41,0x90,0x8a,0x2c,0xfb,0x5a,0x19,0xa5,0x57,0x20,0xb3,0x24,0xe4,0x37,0xa3,0x28,0x8e,0xc4,0x41,0x65,0xf6,0xb6,0x72,0x37,0x89,0x83,0x1b,0xf6,0xd5,0xc7,0xae,0x91,0x5b,0xf2,0x74,0x2e,0xa3,0x5d,0x15,0x27,0xa3,0xbd,0x07,0x55,0x7a,0xf4,0x52,0xe2,0x5a,0xed,0xf2,0x50,0xce,0xa3,0xd1,0x54,0x44,0x4a,0xa4,0x1e,0xcb,0xb5,0xb4,0x2f,0x65,0x20,0x62,0x56,0x17,0x3f,0x89,0x33,0xa9,0x64,0x1c,0x8d,0xf8,0x24,0x8b,0xc3,0x95,0xf2,0x74,0x30,0xa8,0x99,0x9c,0xc8,0x50,0xaa,0x9b,0xd1,0x42,0x06,0x81,0x88,0x36,0xa9,0x39,0xe5,0xd1,0x25,0xcf,0xa0,0xe8,0x24,0x4e,0x03,0x91,0x8e,0x9e,0x24,0xd7,0x0c,0x84,0x65,0xc0,0xbe,0x9f,0xcd,0x66,0x07,0x9e,0x4d,0x56,0x4a,0xc5,0x51,0x83,0x54,0x16,0xb9,0x6e,0x53,0xd7,0xe2,0x93,0x30,0x9e,0x7e,0xa9,0x4f,0x27,0x58,0x2a,0x19,0xcd,0x47,0x83,0xde,0x23,0xb1,0x64,0x43,0xb1,0xac,0x83,0x18,0x23,0x8f,0x86,0x0f,0x18,0x5f,0xa9,0x98,0x0d,0xea,0x10,0xd3,0x55,0x9a,0xc5,0xe9,0x28,0x89,0x65,0x83,0x91,0x1b,0x74,0x18,0xf1,0xa9,0x92,0x97,0x82,0xf4,0xe6,0xd3,0x2f,0xf3,0x34,0x5e,0x45,0xc1,0xee,0x34,0x0e,0x41,0xe3,0x7b,0xb1,0xbf,0x1f,0xec,0x3d,0x3e,0xf0,0xf0,0x7a,0xfc,0x5a,0xc0,0x4e,0x95,0x31,0x2b,0x97,0x96,0xaa,0xca,0xf3,0x4a,0x06,0x6a,0x31,0x62,0x8f,0x06,0x9e,0x4f,0xe4,0xca,0xd6,0xf5,0xbc,0xdd,0xaa,0xb2,0x33,0x72,0xfe,0x73,0x8e,0x1e,0xdd,0xfe,0xc3,0xa5,0x80,0x85,0x1e,0xf6,0xa1,0x8f,0xac,0x51,0x87,0x27,0x5b,0x3a,0x7b,0x83,0x41,0x72,0x5d,0xa5,0x94,0xf3,0xbe,0xa7,0xe8,0x1e,0xed,0xdc,0x0b,0x98,0x8c,0x42,0x19,0x89,0xdd,0x06,0x6f,0xb0,0xac,0x6b,0xf4,0x9d,0x20,0x62,0x4d,0x51,0xb4,0xde,0xa8,0xc6,0x2f,0x77,0x53,0x1e,0xc8,0x55,0x46,0x4a,0xf9,0x3a,0x59,0xc7,0x65,0xc3,0xc2,0xed,0x27,0x21,0x1c,0xc2,0x03,0x2a,0x5d,0x44,0x2e,0xf9,0x5c,0x8c,0xd8,0x2a,0x0d,0x3b,0x01,0x57,0x7c,0xa4,0xef,0xfb,0x49,0x34,0x3f,0x98,0xf0,0x4c,0x3c,0xde,0xef,0xca,0x8f,0x4f,0xdf,0xbc,0xbb,0x1a,0xfc,0xfc,0x62,0x1e,0x1f,0xe3,0x75,0x76,0xfe,0x61,0x71,0xfa,0x61,0x4e,0x97,0xa7,0xf4,0xf5,0xf4,0xe4,0xf8,0x25,0x7e,0x4e,0x7e,0x0d,0x86,0x6f,0x05,0x0d,0x1c,0xff,0xff,0xd9,0xf9,0xbb,0xc1,0xcb,0xe3,0x34,0xdb,0x9f,0x3e,0xfe,0x95,0x06,0xae,0x5f,0xbd,0x3b,0x7d,0xfe,0xe1,0xe4,0x2c,0xb8,0xf8,0xed,0xed,0xc5,0x5b,0x02,0x3e,0x9e,0x9f,0x1e,0xff,0x21,0xff,0x10,0xaf,0xae,0x34,0x89,0x57,0xef,0x3e,0x3c,0x3a,0x4d,0xbf,0xbc,0x9a,0xcf,0xe7,0xe3,0xf1,0xf6,0x5a,0x51,0x33,0xf9,0x27,0x24,0x1d,0x3c,0xc0,0x7b,0x2d,0x4c,0x91,0x4d,0xc8,0x6f,0xea,0xbe,0xe3,0x40,0xa6,0x22,0x11,0x5c,0x8d,0x58,0x14,0xdb,0xcb,0xcd,0x2e,0x90,0x50,0xf2,0x15,0x81,0xe7,0x03,0x75,0x6b,0xa7,0x22,0xd8,0x4c,0x48,0xc5,0xab,0xe9,0x42,0x04,0xa3,0x11,0x9f,0x61,0xdd,0x3d,0x7a,0xd3,0x18,0xce,0x10,0x41,0xaa,0x96,0x06,0x6b,0x55,0x49,0x15,0x1e,0xd7,0xe0,0x6a,0xa5,0xe2,0xcd,0x79,0xd4,0x49,0xeb,0x6c,0x77,0xd0,0xdb,0xf3,0x1d,0xcb,0xce,0x87,0x62,0x06,0xee,0x00,0x40,0xea,0xaa,0x02,0xcc,0x20,0x5a,0xbe,0x04,0xbd,0x27,0xfe,0x6c,0x9c,0xf0,0x29,0xe5,0x67,0xcc,0xfd,0xb4,0x2e,0x59,0x1d,0xf6,0x8b,0xba,0x76,0xd8,0xd7,0x35,0x91,0xae,0xa8,0x2c,0xe9,0xe2,0x68,0x4a,0x9f,0x8c,0x92,0x95,0x82,0x15,0xff,0x58,0x49,0x98,0x92,0x69,0x8c,0x71,0xdb,0xad,0x71,0x6d,0xa6,0x6e,0x12,0x31,0x6e,0x51,0x10,0xb5,0x98,0x0c,0xc6,0x2d,0x5b,0x1a,0x5b,0xec,0x92,0x87,0x2b,0xcc,0xb4,0x58,0xdf,0x16,0x52,0xb9,0x9c,0x6b,0x88,0x4c,0xa5,0x82,0x2f,0x5b,0x2c,0x4b,0xa7,0xe3,0xd6,0x42,0xa9,0x64,0xd4,0xef,0x0f,0xff,0xb5,0xd7,0x1b,0x3e,0x7e,0xd2,0xc3,0x7b,0x6f,0x6f,0x38,0x7a,0x32,0x84,0x78,0x06,0x6a,0x9a,0xc6,0x19,0x92,0xaf,0x84,0x41,0x40,0xcc,0x56,0xee,0xc6,0xc2,0x79,0x18,0xc8,0x4b,0xcb,0x80,0xa7,0xea,0x77,0x5a,0xbe,0x34,0x0e,0x43,0x91,0xb6,0x8e,0xde,0x92,0x48,0x8c,0xe7,0x25,0x06,0xef,0x9b,0x78,0x95,0xea,0x15,0x36,0x20,0x0c,0x89,0x5f,0xa3,0x1d,0xf6,0x41,0x05,0x5c,0xb4,0x5d,0xb4,0x39,0xb6,0x60,0x1f,0xd3,0x43,0x64,0xd3,0x54,0x26,0xca,0x6d,0x05,0xfa,0x7d,0xf6,0x8b,0x50,0xed,0x8c,0xcd,0x85,0x02,0xf9,0x40,0xcc,0xf8,0x2a,0xc4,0x95,0xb1,0x01,0x96,0x09,0x84,0x17,0x82,0x65,0x48,0x2e,0x3c,0x44,0x62,0x9a,0xb3,0x4c,0xa4,0x97,0x22,0x75,0x48,0x5c,0xf2,0xb4,0x80,0x1f,0xb3,0x20,0x9e,0xae,0x96,0x70,0xba,0x1e,0x08,0x9e,0x86,0x82,0x2e,0x9f,0xde,0xbc,0x0c,0x3a,0x6d,0x0b,0xd2,0xde,0xee,0x69,0xbb,0xba,0xcb,0x2a,0x67,0xac,0xf3,0x5d,0x4e,0xe2,0xdb,0xb7,0x92,0xda,0x78,0xcc,0xda,0xed,0xed,0x5a,0x41,0x25,0x8e,0x8b,0x38,0x53,0x11,0x5f,0x0a,0xb0,0x84,0xfb,0x72,0x72,0xd6,0x5e,0x3e,0xe6,0xd7,0x3f,0xa2,0x9f,0xcf,0xd5,0xa9,0xd1,0xab,0x94,0xbf,0xa0,0xbb,0xc3,0xda,0xa3,0x36,0xbe,0x3b,0x05,0xf9,0x24,0x4e,0x15,0x89,0xe7,0x8c,0xa4,0xb1,0x8a,0x51,0x16,0x8d,0xa4,0xe4,0x09,0x19,0x70,0xfe,0x8f,0xed,0xef,0xff,0xc8,0x46,0xec,0xc9,0x60,0xdb,0x4b,0x3f,0x36,0xf0,0xee,0x69,0x22,0x48,0x63,0x47,0x7c,0x2a,0xb7,0x4c,0x84,0x19,0xaa,0xf3,0x3f,0x23,0xde,0x3a,0x24,0x65,0x8f,0x46,0x87,0xa4,0xd8,0x51,0xff,0x4a,0x4c,0x52,0x35,0xf5,0x92,0x44,0xb5,0x3d,0xb8,0x85,0x2b,0xe5,0x3e,0x54,0x38,0x93,0x5e,0x0d,0x7e,0x29,0x4e,0x2f,0xc1,0x8b,0x4c,0xd8,0x7e,0x01,0xfb,0xa1,0xe8,0xe8,0x81,0x36,0x0a,0x1a,0x2a,0x57,0x14,0xc4,0x57,0x07,0x05,0xe8,0x7f,0xc4,0xe4,0x8b,0x54,0x25,0x02,0xee,0x7f,0x96,0x6a,0x23,0x5a,0xe9,0xe9,0x84,0xf1,0xf5,0xd6,0x8c,0xa6,0xc7,0xcf,0x71,0x67,0xe0,0x7a,0xcb,0xf8,0xcf,0x77,0x88,0x74,0x91,0xa9,0xe3,0x08,0x85,0x87,0x56,0xe8,0x79,0x4a,0x4b,0xf9,0xed,0x1b,0x74,0xb0,0x40,0xd0,0x12,0xac,0xef,0x86,0xa3,0x9c,0x01,0x73,0x79,0x20,0x86,0x2b,0xb2,0xf7,0xa5,0x8c,0x57,0xd9,0x47,0x32,0x24,0x89,0xf3,0xe9,0xb3,0x99,0x98,0x21,0xcb,0xe0,0x76,0xc6,0xb1,0x3a,0x66,0x84,0xba,0x88,0x67,0x48,0x4e,0xff,0x45,0xaa,0xc1,0xcc,0xde,0x23,0x3b,0x7c,0x67,0xbc,0x14,0x69,0xc8,0xae,0xd7,0x16,0x0c,0x80,0x4c,0x2c,0x7a,0x61,0x3c,0xef,0xd8,0x39,0x78,0x17,0x11,0xcb,0x90,0xbe,0x11,0xbd,0x63,0x16,0x89,0x2b,0x06,0x53,0x9e,0xeb,0xfb,0x4e,0xfb,0x2a,0x43,0x5e,0x6a,0xef,0x58,0xe0,0x9d,0xf6,0x60,0xd0,0x06,0xc6,0xd6,0xd6,0x6c,0x15,0xa1,0xbb,0x43,0x0a,0x01,0xc9,0x48,0x4c,0xd5,0x82,0x47,0x01,0xec,0xda,0xb1,0xb1,0x01,0xf8,0xb9,0x59,0x89,0x8e,0xe8,0xd9,0x2b,0xe0,0xdd,0x96,0x78,0x0e,0x44,0x3e,0xaf,0x31,0x9d,0x35,0xfa,0x64,0x27,0x7a,0xb0,0xa6,0xb8,0xfe,0x0c,0xe1,0xec,0xc0,0x81,0x8e,0xde,0xc0,0xd5,0x7c,0x8a,0x3c,0xa9,0x84,0x55,0xbe,0xd3,0x42,0xfa,0x6a,0xe9,0xb8,0x09,0x7a,0x99,0x50,0xc7,0x4a,0xa5,0x12,0x59,0x4f,0x74,0x5a,0x32,0x68,0x75,0x59,0xcb,0xc9,0x8a,0x88,0xce,0x0a,0x1b,0x8d,0x45,0xe4,0xc9,0x18,0x77,0x92,0x57,0x3d,0x9e,0x24,0x22,0x0a,0x4e,0x16,0x32,0x0c,0x3a,0x1e,0xf8,0x7b,0x94,0x83,0xb3,0x38,0x00,0x57,0xcb,0x01,0x45,0xd4,0x65,0x17,0x98,0xd0,0x0e,0x2a,0x34,0x54,0x21,0xc0,0xe4,0x3e,0x02,0x4c,0x7a,0xd3,0x90,0x67,0xd9,0x99,0xc9,0x62,0x2d,0xdb,0xd1,0xea,0x00,0xa4,0xbc,0xdb,0x21,0x42,0x72,0x3c,0x38,0x60,0xf2,0x30,0xe7,0x6b,0x61,0x7a,0xa1,0x88,0xe6,0x6a,0x81,0x99,0x9d,0x9d,0x3c,0xa1,0x11,0x34,0xd1,0x59,0xc7,0x36,0x4b,0x78,0x64,0xf8,0x32,0x26,0x9a,0x38,0xdb,0xc8,0xef,0xf7,0x05,0xd4,0xd3,0xc3,0xa4,0xb1,0xcc,0x31,0x24,0x7c,0x25,0xfd,0xf7,0xfb,0xd7,0xbf,0x60,0xca,0x0e,0x4e,0x2a,0xda,0x0b,0x4d,0x9c,0xd2,0x45,0xd5,0x2a,0x93,0xc2,0x2a,0xfc,0x3e,0x56,0xe1,0x55,0xd9,0x68,0x5b,0x51,0x9a,0xc4,0x33,0x07,0x4d,0x36,0xd9,0x62,0x93,0x1d,0x74,0x7f,0xbf,0xc6,0x10,0x14,0xad,0x35,0x33,0xf0,0x8a,0x19,0xaa,0x2e,0x89,0x1d,0x01,0xf9,0xe4,0xee,0xb0,0x24,0xe8,0x01,0xf0,0x6b,0x02,0x58,0x3b,0xaf,0x63,0x9b,0x20,0x06,0x25,0x44,0x83,0xa5,0xf9,0xbd,0x2c,0xcd,0x8d,0x4f,0xae,0xcb,0x28,0xb5,0xae,0x62,0xbb,0xa7,0x1b,0xa2,0x9e,0xed,0x87,0x48,0x59,0x6a,0x89,0xb4,0x05,0x0a,0x2a,0xd4,0x42,0x54,0x23,0x45,0x73,0x41,0xe6,0xed,0xac,0x12,0x34,0xf9,0xe2,0x5c,0x71,0xb5,0xa2,0x5c,0x84,0xde,0xb4,0x48,0x11,0x20,0xd9,0x9c,0x5d,0x52,0xb1,0x8c,0x2f,0x45,0x73,0x82,0x29,0xd1,0xab,0x50,0x95,0x24,0x53,0x4b,0x1f,0xbe,0x9a,0x77,0x25,0x88,0xaa,0x66,0x86,0x93,0xab,0x59,0x20,0x42,0xb8,0xc8,0x86,0x64,0x56,0x15,0xd5,0x35,0x42,0x07,0x22,0xda,0x6e,0x2e,0xc3,0xc9,0x81,0x45,0xc3,0x70,0xe1,0xc0,0x17,0x54,0xd7,0x1c,0xd2,0x6e,0xf4,0x3a,0xcd,0xdc,0xb8,0xc2,0xfe,0x02,0x2c,0x73,0xa0,0xbf,0xa1,0xfa,0x85,0xf5,0x28,0x9d,0x90,0xec,0x76,0x19,0xc8,0x0e,0x56,0xf6,0xf4,0xe6,0x24,0xf7,0xff,0x4e,0x9e,0x06,0x2c,0x96,0x9f,0x82,0x4a,0xda,0x6b,0xb2,0x50,0xe5,0x94,0x26,0x4f,0x82,0x16,0xf4,0x93,0xb4,0x2a,0x98,0x19,0x78,0x7d,0x45,0xc5,0x9c,0xa2,0x07,0x96,0xef,0x92,0xc6,0x06,0x61,0xcc,0x86,0xbd,0xe2,0x6c,0x43,0xa7,0x79,0xb3,0xf9,0x29,0x2b,0x6e,0xd9,0xee,0x51,0x53,0x1f,0xcf,0x20,0x7f,0xb8,0x4d,0x88,0xad,0x78,0x72,0x01,0x5f,0x6c,0xb9,0xdd,0x5f,0x85,0x7a,0xbe,0x23,0x2b,0xbb,0x1f,0xa2,0xd2,0xb6,0x1c,0x74,0x37,0xa2,0x69,0xb9,0x2d,0x57,0xc9,0x9e,0x08,0xd8,0xbb,0x92,0x40,0xd9,0x38,0x19,0x75,0x09,0xa8,0xd2,0xfa,0xe6,0x00,0x5a,0xd5,0x29,0xd5,0xac,0xd7,0x5c,0x2d,0x7a,0x7a,0x43,0x49,0x92,0xb3,0x87,0x6c,0x38,0x18,0x14,0x2d,0xe4,0xc4,0x46,0x6b,0xb9,0xeb,0x3c,0xc7,0xfe,0x09,0x58,0x84,0x8b,0xe5,0x6e,0x3d,0xa0,0x45,0x6f,0xe9,0x3a,0x45,0x43,0x7a,0xa4,0x44,0x5e,0x9f,0xf1,0x8d,0xae,0xd6,0x00,0xae,0x8a,0x2e,0xd2,0x0e,0xb0,0x72,0x93,0xb5,0x0e,0xbc,0x33,0xb9,0x5c,0x13,0x6d,0x79,0x63,0x87,0x8d,0x74,0x2c,0xcc,0x5a,0x3a,0x05,0x39,0x92,0xca,0x69,0xb5,0x3e,0xb5,0x27,0x2a,0x6a,0xef,0xc8,0xcf,0xec,0x3b,0xad,0xf6,0x76,0xd5,0xe9,0x28,0x6b,0xeb,0x16,0x4c,0x50,0x0b,0xc9,0x16,0x02,0x97,0xfe,0xe1,0xa1,0xdb,0x46,0xb5,0xed,0x6e,0x8a,0xda,0x7c,0x49,0x0d,0x3f,0xe3,0x4a,0xdf,0x10,0xe9,0x72,0x21,0x6d,0x57,0xa7,0x52,0x2c,0x9d,0x4f,0xce,0x97,0x4f,0xc9,0xa5,0x68,0x53,0xbb,0x43,0xbd,0xd8,0x33,0x24,0x06,0x13,0xfb,0xb9,0x74,0xa6,0x55,0x43,0x0d,0xc0,0x0a,0x6f,0xe6,0xbe,0xc6,0x32,0xeb,0xec,0xa1,0xcd,0x91,0x73,0xd2,0x3f,0xf6,0xa4,0xc0,0x34,0xa1,0xba,0x4b,0x5d,0x1f,0xf9,0xba,0xee,0xdd,0x1d,0xf7,0x0d,0xe5,0xb6,0x16,0xf4,0x54,0xe3,0x09,0xce,0x09,0xe5,0x9a,0x6f,0x7b,0x24,0x01,0xea,0xb9,0x3a,0xf9,0x91,0x86,0xc7,0xe9,0x43,0x87,0xcc,0xc1,0x0e,0x2b,0x9d,0x74,0x25,0x8c,0x35,0xf5,0x41,0x6e,0xa7,0x8a,0x40,0x8d,0x3f,0x0d,0x5e,0x95,0xaf,0xda,0x98,0x41,0x3c,0x31,0xc3,0xf9,0x5b,0xb0,0xed,0x46,0x7a,0xbf,0x1f,0xc4,0x38,0xda,0x51,0x0b,0x6c,0x80,0x73,0x46,0xb4,0x03,0x73,0x61,0xa2,0xf8,0xaa,0xb2,0xec,0xce,0xd4,0x17,0x21,0x92,0xe3,0x10,0xe7,0xa9,0x2f,0xe9,0x70,0xce,0x64,0x03,0xa8,0x9b,0xcb,0xec,0x1d,0x6e,0x8b,0x90,0x27,0x26,0x2f,0x11,0xc9,0xdd,0x75,0x2e,0xd6,0x84,0x0a,0xd5,0x72,0xec,0xa3,0x3a,0x57,0x7f,0xeb,0xfb,0xb7,0x7c,0xd7,0x0f,0x04,0x77,0x57,0xd8,0x70,0x4a,0xef,0x45,0x72,0x69,0x7a,0x4d,0x03,0x9b,0x68,0x9f,0x39,0x2d,0x6f,0x25,0xb2,0xfd,0xf0,0xab,0xa4,0xf8,0xba,0xf0,0x05,0x7e,0x25,0x12,0xee,0x97,0x11,0x96,0x4b,0xf4,0x28,0xbf,0xa3,0x44,0x50,0x90,0xc8,0xd9,0xec,0x5c,0x09,0x34,0x2c,0x4d,0x1c,0xf6,0xda,0x9f,0xbb,0x8d,0xac,0x87,0x34,0x81,0x35,0xed,0xb2,0x5d,0xfd,0x3d,0x74,0x4c,0xe7,0x30,0xe8,0xa5,0x12,0xe7,0x27,0x60,0xb3,0xdb,0x44,0xe4,0xc7,0x76,0x11,0x33,0x55,0xac,0x79,0xca,0x27,0x13,0x8d,0xd7,0x10,0xff,0x3f,0xb9,0x58,0x8d,0x79,0xae,0x8a,0x54,0x7a,0xa6,0x0b,0xe3,0xb0,0x73,0x5d,0x77,0xa3,0xad,0x5e,0x9d,0xbf,0x39,0x43,0x51,0x4a,0x11,0x15,0x72,0x76,0x53,0x21,0x51,0xc3,0x74,0x33,0x9f,0x0b,0x58,0x16,0x43,0x7b,0xc1,0xab,0xfd,0x2f,0x95,0x31,0xb3,0xf7,0xaa,0x67,0x0d,0xd4,0xdc,0xe7,0xf2,0x5a,0x04,0x9d,0xfd,0x82,0x0c,0x5f,0xd3,0x5f,0xd7,0x91,0x2d,0x0a,0x39,0x2a,0x7d,0xee,0xe8,0x67,0xab,0xed,0x5c,0xd1,0x88,0xe6,0x43,0x14,0x34,0xfc,0x52,0xce,0xb9,0x8a,0x53,0xca,0xb2,0xf6,0x28,0x23,0xc3,0x59,0x50,0xe3,0x38,0x48,0x8c,0x58,0xa7,0x9c,0x32,0xa7,0x12,0x2f,0xd6,0x20,0xd6,0x66,0x35,0xfa,0x27,0xa3,0x42,0x99,0xaf,0x29,0x0d,0x22,0x2f,0x23,0x57,0xe6,0x62,0x35,0xed,0x8d,0x28,0xb7,0xe6,0xf3,0x94,0x79,0x7f,0xf8,0xa1,0x72,0x6f,0x7a,0x5c,0xbf,0x4b,0x2d,0x53,0x47,0x43,0x5b,0x5c,0xa2,0x39,0xfb,0xfc,0xb2,0x00,0x18,0x0b,0xc3,0x98,0xce,0xc1,0x43,0xc8,0x97,0x49,0x87,0x77,0x27,0xdd,0xe9,0xf6,0xd7,0x54,0xa8,0x55,0x1a,0x99,0xfa,0x80,0xed,0x52,0x67,0xd2,0x35,0x97,0x32,0xea,0x4c,0xbb,0x1c,0xfb,0xec,0xdb,0xad,0x22,0x28,0xf5,0x53,0x99,0xe7,0xa1,0x4c,0x28,0x84,0x86,0x38,0xcc,0x70,0x36,0x1c,0x79,0xdc,0xd2,0xa1,0xf3,0x3b,0x39,0x5f,0xa8,0x63,0xc0,0x76,0xd1,0x9f,0x3f,0x8b,0xaf,0x22,0x73,0x0d,0xf2,0xf6,0x42,0x96,0x23,0xe7,0x89,0x10,0x41,0x57,0xd7,0x17,0xa2,0xac,0x8b,0x5a,0xbe,0xcf,0x40,0xea,0x30,0xe4,0xc9,0xb4,0x76,0x90,0xe8,0xbf,0xc6,0xb9,0x5f,0x7a,0x16,0xbf,0x5f,0xe0,0x00,0x10,0x0f,0x5a,0xcf,0xa7,0x3c,0xa4,0x1c,0x55,0x87,0x79,0xb3,0x52,0x74,0x02,0xdd,0x34,0x55,0x43,0xc2,0x11,0xf1,0xc2,0xa7,0xfc,0x1e,0xa6,0xd9,0x00,0x58,0x27,0x5f,0xce,0xd5,0xd0,0x94,0xa5,0x49,0xf7,0xc8,0xc4,0xa6,0x45,0x2e,0xf4,0xa6,0xea,0xd7,0x2e,0xca,0x5f,0x71,0xea,0xea,0x18,0xbc,0xbe,0x0a,0xf9,0x36,0xb4,0xa4,0x66,0x2d,0xbc,0x86,0x58,0x31,0xeb,0xd0,0xb2,0x63,0x0d,0xa4,0xcc,0x1a,0xad,0x23,0x95,0xcf,0xba,0xa4,0xcc,0x58,0xa3,0x54,0x7a,0x95,0xd7,0x8b,0x65,0xa7,0xab,0x72,0xe9,0x41,0x43,0x0d,0x5f,0x38,0x2a,0x3f,0xe1,0xe1,0x74,0x15,0x22,0x47,0xb0,0x7c,0x7d,0x02,0xa6,0xa1,0xe9,0x60,0x5c,0x1b,0xdd,0x3c,0x34,0xc8,0x68,0x1b,0xe9,0xf8,0x4e,0xc5,0x25,0x59,0x3f,0xb7,0x03,0xfc,0x57,0x93,0xa5,0x45,0xc6,0xb9,0xa3,0x5a,0x98,0xaf,0x7c,0x9d,0x30,0x59,0x73,0x96,0xd2,0x9b,0xd1,0x32,0x75,0x86,0x48,0x8b,0x05,0x1f,0x9d,0x0d,0x6a,0x08,0x26,0xd4,0xaa,0xc3,0x55,0xff,0xa7,0x0b,0xf4,0x9b,0x90,0xe3,0x05,0x76,0xc2,0x90,0x44,0x53,0xc7,0xe3,0x84,0xd7,0x12,0x67,0x9f,0xab,0x25,0x43,0xaa,0x46,0x74,0x5e,0xeb,0xeb,0x14,0x69,0x50,0x90,0xd8,0x75,0x3f,0xf3,0x45,0xdb,0xf5,0x44,0xab,0x63,0x18,0xd9,0xbc,0xf1,0xff,0x85,0x70,0x95,0xa5,0x3a,0x8b,0x8b,0xd5,0xf2,0x16,0x2b,0xb3,0xab,0xc5,0x3a,0xe5,0x0a,0xe0,0x7f,0x01,0x04,0x08,0x0e,0x51,0x5c,0xac,0x04,0x55,0xc4,0xfc,0x9a,0x7a,0x37,0xe8,0x56,0xb4,0xa7,0x8e,0xda,0xc5,0xc2,0x1a,0x89,0x0b,0xae,0x32,0x82,0xe8,0x38,0xaf,0xc7,0xc3,0xd0,0x48,0xaa,0x55,0x20,0xc8,0x3c,0x63,0xd2,0xb3,0xcb,0x06,0x74,0xc1,0xaf,0x89,0xc3,0x86,0xc4,0xa2,0x9f,0xa4,0x95,0x1e,0xf4,0xb0,0x12,0xcb,0x77,0xe5,0x8d,0x4d,0xb8,0xc8,0xca,0x9e,0xb9,0x10,0x1a,0x68,0x50,0x97,0xda,0x99,0x63,0x93,0x5e,0x0a,0x9f,0xae,0xa7,0x35,0xcf,0xb3,0xe0,0x8f,0xeb,0xb4,0xd8,0x06,0x67,0x37,0x6f,0xd4,0x69,0x79,0xae,0x6a,0xc6,0x9b,0xdc,0xa1,0xa2,0x73,0x29,0x8a,0xef,0x60,0x3b,0x9b,0x2d,0xe3,0x0b,0xd4,0x40,0xd2,0x77,0xd0,0x0d,0x22,0x69,0x33,0xce,0xe4,0xb5,0xae,0xc7,0xe8,0xb7,0x68,0xc1,0x4d,0x0e,0x72,0x1c,0xe4,0x88,0x0d,0x6c,0x63,0xab,0x96,0x94,0x51,0x3d,0x5d,0x4d,0xbd,0xac,0x1b,0xc6,0x17,0xc0,0xc0,0x35,0xc8,0x0b,0xaa,0x7a,0xe3,0x98,0xa7,0x2c,0xca,0xfa,0xa6,0x55,0xfb,0xaa,0xc9,0x8e,0xdc,0x5d,0x58,0x91,0xf5,0x1e,0xfa,0x2c,0xb7,0xbb,0x86,0xf8,0x3a,0x70,0x9f,0xf3,0x36,0xc3,0xe3,0x18,0x3a,0xda,0xd3,0x85,0x1c,0x0c,0x75,0xef,0xb4,0xa5,0x1f,0xbb,0x15,0x0f,0x86,0x4c,0xb2,0xb5,0x4f,0x57,0xf0,0x04,0x41,0x8f,0xfe,0x22,0x33,0x3c,0xa1,0x46,0xd1,0xce,0x8f,0xd9,0xed,0xa1,0x21,0xce,0x06,0x74,0xcf,0xe6,0x1c,0x20,0xea,0x65,0xbf,0x0b,0xbd,0x3c,0x76,0xd4,0x14,0x6a,0xa7,0x90,0xd4,0xd5,0x99,0x67,0x67,0xb9,0x70,0xee,0xa3,0xa8,0x3b,0x44,0x34,0x6d,0xd8,0x3f,0x14,0xb4,0x42,0xe4,0xfe,0xe2,0x92,0x60,0xe8,0x6c,0xf3,0xad,0x5c,0xc7,0xed,0x47,0xbb,0xf8,0x67,0x02,0xed,0x9d,0x9d,0xa7,0x73,0x7f,0x01,0x98,0x3e,0x61,0xfc,0x3e,0x26,0x00,0x00};
#define PART_BOUNDARY "123456789000000000000987654321"

namespace webserver{
  #include "esp_http_server.h"
  static const char *TAG = "camera_httpd";
  static const char *_STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
  static const char *_STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
  static const char *_STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\nX-Timestamp: %d.%06d\r\n\r\n";
  
  httpd_handle_t stream_httpd = NULL;
  httpd_handle_t camera_httpd = NULL;
  static esp_err_t stream_handler(httpd_req_t *req)
  {
      camera_fb_t *fb = NULL;
      struct timeval _timestamp;
      esp_err_t res = ESP_OK;
      size_t _jpg_buf_len = 0;
      uint8_t *_jpg_buf = NULL;
      char *part_buf[128];
  
      static int64_t last_frame = 0;
      if (!last_frame)
      {
          last_frame = esp_timer_get_time();
      }
  
      res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
      if (res != ESP_OK)
      {
          return res;
      }
  
      httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
      httpd_resp_set_hdr(req, "X-Framerate", "60");
  
      while (true)
      {
          fb = esp_camera_fb_get();
          if (!fb)
          {
              ESP_LOGE(TAG, "Camera capture failed");
              res = ESP_FAIL;
          }
          else
          {
              _timestamp.tv_sec = fb->timestamp.tv_sec;
              _timestamp.tv_usec = fb->timestamp.tv_usec;
                  if (fb->format != PIXFORMAT_JPEG)
                  {
                      bool jpeg_converted = frame2jpg(fb, 80, &_jpg_buf, &_jpg_buf_len);
                      esp_camera_fb_return(fb);
                      fb = NULL;
                      if (!jpeg_converted)
                      {
                          ESP_LOGE(TAG, "JPEG compression failed");
                          res = ESP_FAIL;
                      }
                  }
                  else
                  {
                      _jpg_buf_len = fb->len;
                      _jpg_buf = fb->buf;
                  }
          }
          if (res == ESP_OK)
          {
              res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
          }
          if (res == ESP_OK)
          {
              size_t hlen = snprintf((char *)part_buf, 128, _STREAM_PART, _jpg_buf_len, _timestamp.tv_sec, _timestamp.tv_usec);
              res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
          }
          if (res == ESP_OK)
          {
              res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
          }
          if (fb)
          {
              esp_camera_fb_return(fb);
              fb = NULL;
              _jpg_buf = NULL;
          }
          else if (_jpg_buf)
          {
              free(_jpg_buf);
              _jpg_buf = NULL;
          }
          if (res != ESP_OK)
          {
              break;
          }
          int64_t fr_end = esp_timer_get_time();
  
          int64_t frame_time = fr_end - last_frame;
          last_frame = fr_end;
          frame_time /= 1000;
      }
  
      last_frame = 0;
      return res;
  }
  
  static esp_err_t index_handler(httpd_req_t *req)
  {
      httpd_resp_set_type(req, "text/html");
      httpd_resp_set_hdr(req, "Content-Encoding", "gzip");
      sensor_t *s = esp_camera_sensor_get();
      if (s != NULL) {        
        return httpd_resp_send(req, (const char *)index_ov2640_html_gz, index_ov2640_html_gz_len);       
      } else {
          ESP_LOGE(TAG, "Camera sensor not found");
          return httpd_resp_send_500(req);
      }
  }
  void startCameraServer()
  {
      httpd_config_t config = HTTPD_DEFAULT_CONFIG();
      config.max_uri_handlers = 16;
  
      httpd_uri_t index_uri = {
          .uri = "/",
          .method = HTTP_GET,
          .handler = index_handler,
          .user_ctx = NULL};
  
      httpd_uri_t stream_uri = {
          .uri = "/stream",
          .method = HTTP_GET,
          .handler = stream_handler,
          .user_ctx = NULL};    
  
      ESP_LOGI(TAG, "Starting web server on port: '%d'", config.server_port);
      Serial.printf("Starting web server on port: '%d'", config.server_port);
      if (httpd_start(&camera_httpd, &config) == ESP_OK)
      {
          httpd_register_uri_handler(camera_httpd, &index_uri);        
      }
  
      config.server_port += 1;
      config.ctrl_port += 1;
      ESP_LOGI(TAG, "Starting stream server on port: '%d'", config.server_port);
      Serial.printf("Starting stream server on port: '%d'", config.server_port);
      if (httpd_start(&stream_httpd, &config) == ESP_OK)
      {
          httpd_register_uri_handler(stream_httpd, &stream_uri);
      }
  }  
}




void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_SVGA;
  config.jpeg_quality = 10;
  config.fb_count = 2;

  pinMode(ledPin, OUTPUT);
  
  // camera init
  Serial.println("Chilling a bit before starting the camera");
  delay(3000);
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
  delay(3000);
  Serial.println("Camera Started");
  sensor_t * s = esp_camera_sensor_get();
  // drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_SVGA);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  delay(500);
  webserver::startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  
  initWebSocket();
 
  // Start server
  server.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  ws.cleanupClients();  
}
